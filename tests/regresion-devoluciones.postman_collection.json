{
	"info": {
		"name": "Regresión - devoluciones",
		"_postman_id": "67592b34-5d0e-3106-d115-8bfda007a95a",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Reestablecimiento de la configuracion",
			"description": "",
			"item": [
				{
					"name": "00a - QAPI unset CS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"site\": \"{{site}}\"\n}"
						},
						"url": {
							"raw": "{{qapi_url}}/sites/cs",
							"host": [
								"{{qapi_url}}"
							],
							"path": [
								"sites",
								"cs"
							]
						},
						"description": "POST call to set CS in a certain site"
					},
					"response": []
				},
				{
					"name": "00b - QAPI delete subsites",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"site\": \"{{site}}\"\n}"
						},
						"url": {
							"raw": "{{qapi_url}}/sites/subsites",
							"host": [
								"{{qapi_url}}"
							],
							"path": [
								"sites",
								"subsites"
							]
						},
						"description": "POST call to create subsites in a certain site"
					},
					"response": []
				},
				{
					"name": "00c - QAPI unset Porcentaje",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"site\": \"{{site}}\"\n}"
						},
						"url": {
							"raw": "{{qapi_url}}/sites/porcentaje",
							"host": [
								"{{qapi_url}}"
							],
							"path": [
								"sites",
								"porcentaje"
							]
						},
						"description": "POST call to set Porcentaje in a certain site and subsites"
					},
					"response": []
				},
				{
					"name": "00d - QAPI unset Dos Pasos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"site\": \"{{site}}\",\n   \"medio_de_pago\" : \"1\"\n}"
						},
						"url": {
							"raw": "{{qapi_url}}/sites/dospasos",
							"host": [
								"{{qapi_url}}"
							],
							"path": [
								"sites",
								"dospasos"
							]
						},
						"description": "POST call to set CS in a certain site"
					},
					"response": []
				},
				{
					"name": "00e - QAPI unset Agregador",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"site\": \"{{site}}\"\n}"
						},
						"url": {
							"raw": "{{qapi_url}}/sites/agregador",
							"host": [
								"{{qapi_url}}"
							],
							"path": [
								"sites",
								"agregador"
							]
						},
						"description": "POST call to set CS in a certain site"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"id": "be80160e-356c-475a-8304-3ef00a5f5c78",
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"id": "b67ca674-2b59-4cf0-a25c-bf2758dc6f80",
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "Pagos y devoluciones",
			"description": "",
			"item": [
				{
					"name": "02a - Creación de token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseBody) {",
									"    var jsonData = JSON.parse(responseBody);",
									"} else {",
									"    console.log('No se recibió respuesta con el formato esperado'); ",
									"}",
									"",
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"if (!tests[\"Status code is 201\"]) {",
									"    console.log('Alguna de las comprobaciones no dio resultados satisfactorios.');",
									"    if (jsonData) {",
									"        console.log('Se adjunta la respuesta recibida:');",
									"        console.log(jsonData);    ",
									"    } else {",
									"       console.log('Error al intentar parsear la respuesta obtenida. Se adjunta el cuerpo de la respuesta como fue recibido:');",
									"       console.log(responseBody);   ",
									"    }",
									"",
									"} else {",
									"",
									"    if (jsonData.id) {",
									"        console.log('Se creó el token con id ' + jsonData.id);",
									"        postman.setEnvironmentVariable(\"token\", jsonData.id);",
									"    } else {",
									"        console.log('No se encontró un id de token en la respuesta');",
									"    }",
									"    ",
									"    if (jsonData.bin) {",
									"        postman.setEnvironmentVariable(\"bin\", jsonData.bin);",
									"    }",
									"    ",
									"    if (pm.environment.get(\"token\")) {",
									"        console.log('Se configuró la variable de entorno token con el valor ' + pm.environment.get(\"token\")); ",
									"    } else {",
									"        console.log('No se pudo configurar correctamente la variable de entorno token');    ",
									"    }",
									"    ",
									"    if (pm.environment.get(\"bin\")) {",
									"        console.log('Se configuró la variable de entorno bin con el valor ' + pm.environment.get(\"bin\")); ",
									"    } else {",
									"        console.log('No se pudo configurar correctamente la variable de entorno bin');    ",
									"    }",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "apikey",
								"value": "{{keypublic}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"card_number\" : \"4509790112684851\",\n    \"card_expiration_month\" : \"07\",\n    \"card_expiration_year\" : \"19\", \n    \"security_code\" : \"234\",\n    \"card_holder_name\" : \"Valentin Santiago Gomez\",\n    \"card_holder_birthday\" : \"01012017\",\n    \"card_holder_door_number\": 348,\n    \"card_holder_identification\" : {\n       \"type\" : \"dni\",\n       \"number\" : \"23968498\"\n    },\n    \"fraud_detection\" : {\n        \"device_unique_identifier\": \"12345\"\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v2/tokens",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"tokens"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "02b - Pago simple",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseBody) {",
									"    var jsonData = JSON.parse(responseBody);",
									"} else {",
									"    console.log('No se recibió respuesta con el formato esperado'); ",
									"}",
									"",
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"if (!tests[\"Status code is 201\"]) {",
									"    console.log('Alguna de las comprobaciones no dio resultados satisfactorios.');",
									"    ",
									"    if (jsonData) {",
									"        console.log('Se adjunta la respuesta recibida:');",
									"        console.log(jsonData);",
									"        ",
									"    } else {",
									"       console.log('Error al intentar parsear la respuesta obtenida. Se adjunta el cuerpo de la respuesta como fue recibido:');",
									"       console.log(responseBody);   ",
									"    }",
									"",
									"} else {",
									"",
									"    if (jsonData.id) {",
									"        console.log('Se creó el pago con id ' + jsonData.id);",
									"        postman.setEnvironmentVariable(\"chargeId\", jsonData.id);",
									"    } else {",
									"        console.log('No se encontró un id de transacción en la respuesta');",
									"    }",
									"    ",
									"    if (pm.environment.get(\"chargeId\")) {",
									"        console.log('Se configuró la variable de entorno chargeId con el valor ' + pm.environment.get(\"chargeId\")); ",
									"    } else {",
									"        console.log('No se pudo configurar correctamente la variable de entorno chargeId');    ",
									"    }",
									"    ",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "apikey",
								"value": "{{keyprivate}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customer\": {\n      \"id\": \"morton\"\n  },\n   \"site_transaction_id\": \"regrdev {{$timestamp}}\",\n   \"token\": \"{{token}}\",\n   \"payment_method_id\": 1,\n   \"bin\": \"{{bin}}\",\n   \"amount\": 20000,\n   \"currency\": \"ARS\",\n   \"installments\": 1,\n   \"description\": \"Prueba QA\",\n   \"payment_type\": \"single\",\n   \"establishment_name\" : \"prueba desa soft\",\n   \"sub_payments\": [\n     ],\n   \"fraud_detection\": {\n\t\t\"send_to_cs\": false\n   }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v2/payments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"payments"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "02c - Anulación de pago",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"if (!tests[\"Status code is 201\"]) {",
									"    console.log('Alguna de las comprobaciones no dio resultados satisfactorios.');",
									"    ",
									"    if (jsonData) {",
									"        console.log('Se adjunta la respuesta recibida:');",
									"        console.log(jsonData);",
									"        ",
									"    } else {",
									"       console.log('Error al intentar parsear la respuesta obtenida. Se adjunta el cuerpo de la respuesta como fue recibido:');",
									"       console.log(responseBody);   ",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apikey",
								"value": "{{keyprivate}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v2/payments/{{chargeId}}/refunds",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"payments",
								"{{chargeId}}",
								"refunds"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "03a - Creación de token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseBody) {",
									"    var jsonData = JSON.parse(responseBody);",
									"} else {",
									"    console.log('No se recibió respuesta con el formato esperado'); ",
									"}",
									"",
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"if (!tests[\"Status code is 201\"]) {",
									"    console.log('Alguna de las comprobaciones no dio resultados satisfactorios.');",
									"    if (jsonData) {",
									"        console.log('Se adjunta la respuesta recibida:');",
									"        console.log(jsonData);    ",
									"    } else {",
									"       console.log('Error al intentar parsear la respuesta obtenida. Se adjunta el cuerpo de la respuesta como fue recibido:');",
									"       console.log(responseBody);   ",
									"    }",
									"",
									"} else {",
									"",
									"    if (jsonData.id) {",
									"        console.log('Se creó el token con id ' + jsonData.id);",
									"        postman.setEnvironmentVariable(\"token\", jsonData.id);",
									"    } else {",
									"        console.log('No se encontró un id de token en la respuesta');",
									"    }",
									"    ",
									"    if (jsonData.bin) {",
									"        postman.setEnvironmentVariable(\"bin\", jsonData.bin);",
									"    }",
									"    ",
									"    if (pm.environment.get(\"token\")) {",
									"        console.log('Se configuró la variable de entorno token con el valor ' + pm.environment.get(\"token\")); ",
									"    } else {",
									"        console.log('No se pudo configurar correctamente la variable de entorno token');    ",
									"    }",
									"    ",
									"    if (pm.environment.get(\"bin\")) {",
									"        console.log('Se configuró la variable de entorno bin con el valor ' + pm.environment.get(\"bin\")); ",
									"    } else {",
									"        console.log('No se pudo configurar correctamente la variable de entorno bin');    ",
									"    }",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "apikey",
								"value": "{{keypublic}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"card_number\" : \"4509790112684851\",\n    \"card_expiration_month\" : \"07\",\n    \"card_expiration_year\" : \"19\", \n    \"security_code\" : \"234\",\n    \"card_holder_name\" : \"Valentin Santiago Gomez\",\n    \"card_holder_birthday\" : \"01012017\",\n    \"card_holder_door_number\": 348,\n    \"card_holder_identification\" : {\n       \"type\" : \"dni\",\n       \"number\" : \"23968498\"\n    },\n    \"fraud_detection\" : {\n        \"device_unique_identifier\": \"12345\"\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v2/tokens",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"tokens"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "03b - Pago simple",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseBody) {",
									"    var jsonData = JSON.parse(responseBody);",
									"} else {",
									"    console.log('No se recibió respuesta con el formato esperado'); ",
									"}",
									"",
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"if (!tests[\"Status code is 201\"]) {",
									"    console.log('Alguna de las comprobaciones no dio resultados satisfactorios.');",
									"    ",
									"    if (jsonData) {",
									"        console.log('Se adjunta la respuesta recibida:');",
									"        console.log(jsonData);",
									"        ",
									"    } else {",
									"       console.log('Error al intentar parsear la respuesta obtenida. Se adjunta el cuerpo de la respuesta como fue recibido:');",
									"       console.log(responseBody);   ",
									"    }",
									"",
									"} else {",
									"",
									"    if (jsonData.id) {",
									"        console.log('Se creó el pago con id ' + jsonData.id);",
									"        postman.setEnvironmentVariable(\"chargeId\", jsonData.id);",
									"    } else {",
									"        console.log('No se encontró un id de transacción en la respuesta');",
									"    }",
									"    ",
									"    if (pm.environment.get(\"chargeId\")) {",
									"        console.log('Se configuró la variable de entorno chargeId con el valor ' + pm.environment.get(\"chargeId\")); ",
									"    } else {",
									"        console.log('No se pudo configurar correctamente la variable de entorno chargeId');    ",
									"    }",
									"    ",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "apikey",
								"value": "{{keyprivate}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customer\": {\n      \"id\": \"morton\"\n  },\n   \"site_transaction_id\": \"regrdev {{$timestamp}}\",\n   \"token\": \"{{token}}\",\n   \"payment_method_id\": 1,\n   \"bin\": \"{{bin}}\",\n   \"amount\": 20000,\n   \"currency\": \"ARS\",\n   \"installments\": 1,\n   \"description\": \"Prueba QA\",\n   \"payment_type\": \"single\",\n   \"establishment_name\" : \"prueba desa soft\",\n   \"sub_payments\": [\n     ],\n   \"fraud_detection\": {\n\t\t\"send_to_cs\": false\n   }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v2/payments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"payments"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "1 - QAPI check DB",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"site\": \"{{site}}\",\n   \"charge_id\": \"{{chargeId}}\"\n}"
						},
						"url": {
							"raw": "{{qapi_url}}/tests/db",
							"host": [
								"{{qapi_url}}"
							],
							"path": [
								"tests",
								"db"
							]
						},
						"description": "POST check if an operation with these values exists in DB"
					},
					"response": []
				},
				{
					"name": "03c - Devolucion parcial",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseBody) {",
									"    var jsonData = JSON.parse(responseBody);",
									"} else {",
									"    console.log('No se recibió respuesta con el formato esperado'); ",
									"}",
									"",
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"if (!tests[\"Status code is 201\"]) {",
									"    console.log('Alguna de las comprobaciones no dio resultados satisfactorios.');",
									"    ",
									"    if (jsonData) {",
									"        console.log('Se adjunta la respuesta recibida:');",
									"        console.log(jsonData);",
									"        ",
									"    } else {",
									"       console.log('Error al intentar parsear la respuesta obtenida. Se adjunta el cuerpo de la respuesta como fue recibido:');",
									"       console.log(responseBody);   ",
									"    }",
									"",
									"} else {",
									"",
									"    if (jsonData.id) {",
									"        console.log('Se creó la devolución con id ' + jsonData.id);",
									"        postman.setEnvironmentVariable(\"refundId\", jsonData.id);",
									"    } else {",
									"        console.log('No se encontró un id de devolución en la respuesta');",
									"    }",
									"    ",
									"    if (pm.environment.get(\"refundId\")) {",
									"        console.log('Se configuró la variable de entorno refundId con el valor ' + pm.environment.get(\"refundId\")); ",
									"    } else {",
									"        console.log('No se pudo configurar correctamente la variable de entorno refundId');    ",
									"    }",
									"    ",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "apikey",
								"value": "{{keyprivate}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"amount\": 10000\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v2/payments/{{chargeId}}/refunds",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"payments",
								"{{chargeId}}",
								"refunds"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "04a - Creación de token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseBody) {",
									"    var jsonData = JSON.parse(responseBody);",
									"} else {",
									"    console.log('No se recibió respuesta con el formato esperado'); ",
									"}",
									"",
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"if (!tests[\"Status code is 201\"]) {",
									"    console.log('Alguna de las comprobaciones no dio resultados satisfactorios.');",
									"    if (jsonData) {",
									"        console.log('Se adjunta la respuesta recibida:');",
									"        console.log(jsonData);    ",
									"    } else {",
									"       console.log('Error al intentar parsear la respuesta obtenida. Se adjunta el cuerpo de la respuesta como fue recibido:');",
									"       console.log(responseBody);   ",
									"    }",
									"",
									"} else {",
									"",
									"    if (jsonData.id) {",
									"        console.log('Se creó el token con id ' + jsonData.id);",
									"        postman.setEnvironmentVariable(\"token\", jsonData.id);",
									"    } else {",
									"        console.log('No se encontró un id de token en la respuesta');",
									"    }",
									"    ",
									"    if (jsonData.bin) {",
									"        postman.setEnvironmentVariable(\"bin\", jsonData.bin);",
									"    }",
									"    ",
									"    if (pm.environment.get(\"token\")) {",
									"        console.log('Se configuró la variable de entorno token con el valor ' + pm.environment.get(\"token\")); ",
									"    } else {",
									"        console.log('No se pudo configurar correctamente la variable de entorno token');    ",
									"    }",
									"    ",
									"    if (pm.environment.get(\"bin\")) {",
									"        console.log('Se configuró la variable de entorno bin con el valor ' + pm.environment.get(\"bin\")); ",
									"    } else {",
									"        console.log('No se pudo configurar correctamente la variable de entorno bin');    ",
									"    }",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "apikey",
								"value": "{{keypublic}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"card_number\" : \"4509790112684851\",\n    \"card_expiration_month\" : \"07\",\n    \"card_expiration_year\" : \"19\", \n    \"security_code\" : \"234\",\n    \"card_holder_name\" : \"Valentin Santiago Gomez\",\n    \"card_holder_birthday\" : \"01012017\",\n    \"card_holder_door_number\": 348,\n    \"card_holder_identification\" : {\n       \"type\" : \"dni\",\n       \"number\" : \"23968498\"\n    },\n    \"fraud_detection\" : {\n        \"device_unique_identifier\": \"12345\"\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v2/tokens",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"tokens"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "04b - Pago simple",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseBody) {",
									"    var jsonData = JSON.parse(responseBody);",
									"} else {",
									"    console.log('No se recibió respuesta con el formato esperado'); ",
									"}",
									"",
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"if (!tests[\"Status code is 201\"]) {",
									"    console.log('Alguna de las comprobaciones no dio resultados satisfactorios.');",
									"    ",
									"    if (jsonData) {",
									"        console.log('Se adjunta la respuesta recibida:');",
									"        console.log(jsonData);",
									"        ",
									"    } else {",
									"       console.log('Error al intentar parsear la respuesta obtenida. Se adjunta el cuerpo de la respuesta como fue recibido:');",
									"       console.log(responseBody);   ",
									"    }",
									"",
									"} else {",
									"",
									"    if (jsonData.id) {",
									"        console.log('Se creó el pago con id ' + jsonData.id);",
									"        postman.setEnvironmentVariable(\"chargeId\", jsonData.id);",
									"    } else {",
									"        console.log('No se encontró un id de transacción en la respuesta');",
									"    }",
									"    ",
									"    if (pm.environment.get(\"chargeId\")) {",
									"        console.log('Se configuró la variable de entorno chargeId con el valor ' + pm.environment.get(\"chargeId\")); ",
									"    } else {",
									"        console.log('No se pudo configurar correctamente la variable de entorno chargeId');    ",
									"    }",
									"    ",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "apikey",
								"value": "{{keyprivate}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customer\": {\n      \"id\": \"morton\"\n  },\n   \"site_transaction_id\": \"regrdev {{$timestamp}}\",\n   \"token\": \"{{token}}\",\n   \"payment_method_id\": 1,\n   \"bin\": \"{{bin}}\",\n   \"amount\": 20000,\n   \"currency\": \"ARS\",\n   \"installments\": 1,\n   \"description\": \"Prueba QA\",\n   \"payment_type\": \"single\",\n   \"establishment_name\" : \"prueba desa soft\",\n   \"sub_payments\": [\n     ],\n   \"fraud_detection\": {\n\t\t\"send_to_cs\": false\n   }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v2/payments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"payments"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "1 - QAPI check DB",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"site\": \"{{site}}\",\n   \"charge_id\": \"{{chargeId}}\"\n}"
						},
						"url": {
							"raw": "{{qapi_url}}/tests/db",
							"host": [
								"{{qapi_url}}"
							],
							"path": [
								"tests",
								"db"
							]
						},
						"description": "POST check if an operation with these values exists in DB"
					},
					"response": []
				},
				{
					"name": "04c - Devolución total",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseBody) {",
									"    var jsonData = JSON.parse(responseBody);",
									"} else {",
									"    console.log('No se recibió respuesta con el formato esperado'); ",
									"}",
									"",
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"if (!tests[\"Status code is 201\"]) {",
									"    console.log('Alguna de las comprobaciones no dio resultados satisfactorios.');",
									"    ",
									"    if (jsonData) {",
									"        console.log('Se adjunta la respuesta recibida:');",
									"        console.log(jsonData);",
									"        ",
									"    } else {",
									"       console.log('Error al intentar parsear la respuesta obtenida. Se adjunta el cuerpo de la respuesta como fue recibido:');",
									"       console.log(responseBody);   ",
									"    }",
									"",
									"} else {",
									"",
									"    if (jsonData.id) {",
									"        console.log('Se creó la devolución con id ' + jsonData.id);",
									"        postman.setEnvironmentVariable(\"refundId\", jsonData.id);",
									"    } else {",
									"        console.log('No se encontró un id de devolución en la respuesta');",
									"    }",
									"    ",
									"    if (pm.environment.get(\"refundId\")) {",
									"        console.log('Se configuró la variable de entorno refundId con el valor ' + pm.environment.get(\"refundId\")); ",
									"    } else {",
									"        console.log('No se pudo configurar correctamente la variable de entorno refundId');    ",
									"    }",
									"    ",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "apikey",
								"value": "{{keyprivate}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"amount\": 20000\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v2/payments/{{chargeId}}/refunds",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"payments",
								"{{chargeId}}",
								"refunds"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "05a - Creación de token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseBody) {",
									"    var jsonData = JSON.parse(responseBody);",
									"} else {",
									"    console.log('No se recibió respuesta con el formato esperado'); ",
									"}",
									"",
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"if (!tests[\"Status code is 201\"]) {",
									"    console.log('Alguna de las comprobaciones no dio resultados satisfactorios.');",
									"    if (jsonData) {",
									"        console.log('Se adjunta la respuesta recibida:');",
									"        console.log(jsonData);    ",
									"    } else {",
									"       console.log('Error al intentar parsear la respuesta obtenida. Se adjunta el cuerpo de la respuesta como fue recibido:');",
									"       console.log(responseBody);   ",
									"    }",
									"",
									"} else {",
									"",
									"    if (jsonData.id) {",
									"        console.log('Se creó el token con id ' + jsonData.id);",
									"        postman.setEnvironmentVariable(\"token\", jsonData.id);",
									"    } else {",
									"        console.log('No se encontró un id de token en la respuesta');",
									"    }",
									"    ",
									"    if (jsonData.bin) {",
									"        postman.setEnvironmentVariable(\"bin\", jsonData.bin);",
									"    }",
									"    ",
									"    if (pm.environment.get(\"token\")) {",
									"        console.log('Se configuró la variable de entorno token con el valor ' + pm.environment.get(\"token\")); ",
									"    } else {",
									"        console.log('No se pudo configurar correctamente la variable de entorno token');    ",
									"    }",
									"    ",
									"    if (pm.environment.get(\"bin\")) {",
									"        console.log('Se configuró la variable de entorno bin con el valor ' + pm.environment.get(\"bin\")); ",
									"    } else {",
									"        console.log('No se pudo configurar correctamente la variable de entorno bin');    ",
									"    }",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "apikey",
								"value": "{{keypublic}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"card_number\" : \"4509790112684851\",\n    \"card_expiration_month\" : \"07\",\n    \"card_expiration_year\" : \"19\", \n    \"security_code\" : \"234\",\n    \"card_holder_name\" : \"Valentin Santiago Gomez\",\n    \"card_holder_birthday\" : \"01012017\",\n    \"card_holder_door_number\": 348,\n    \"card_holder_identification\" : {\n       \"type\" : \"dni\",\n       \"number\" : \"23968498\"\n    },\n    \"fraud_detection\" : {\n        \"device_unique_identifier\": \"12345\"\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v2/tokens",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"tokens"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "05b - Pago simple",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseBody) {",
									"    var jsonData = JSON.parse(responseBody);",
									"} else {",
									"    console.log('No se recibió respuesta con el formato esperado'); ",
									"}",
									"",
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"if (!tests[\"Status code is 201\"]) {",
									"    console.log('Alguna de las comprobaciones no dio resultados satisfactorios.');",
									"    ",
									"    if (jsonData) {",
									"        console.log('Se adjunta la respuesta recibida:');",
									"        console.log(jsonData);",
									"        ",
									"    } else {",
									"       console.log('Error al intentar parsear la respuesta obtenida. Se adjunta el cuerpo de la respuesta como fue recibido:');",
									"       console.log(responseBody);   ",
									"    }",
									"",
									"} else {",
									"",
									"    if (jsonData.id) {",
									"        console.log('Se creó el pago con id ' + jsonData.id);",
									"        postman.setEnvironmentVariable(\"chargeId\", jsonData.id);",
									"    } else {",
									"        console.log('No se encontró un id de transacción en la respuesta');",
									"    }",
									"    ",
									"    if (pm.environment.get(\"chargeId\")) {",
									"        console.log('Se configuró la variable de entorno chargeId con el valor ' + pm.environment.get(\"chargeId\")); ",
									"    } else {",
									"        console.log('No se pudo configurar correctamente la variable de entorno chargeId');    ",
									"    }",
									"    ",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "apikey",
								"value": "{{keyprivate}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customer\": {\n      \"id\": \"morton\"\n  },\n   \"site_transaction_id\": \"regrdev {{$timestamp}}\",\n   \"token\": \"{{token}}\",\n   \"payment_method_id\": 1,\n   \"bin\": \"{{bin}}\",\n   \"amount\": 20000,\n   \"currency\": \"ARS\",\n   \"installments\": 1,\n   \"description\": \"Prueba QA\",\n   \"payment_type\": \"single\",\n   \"establishment_name\" : \"prueba desa soft\",\n   \"sub_payments\": [\n     ],\n   \"fraud_detection\": {\n\t\t\"send_to_cs\": false\n   }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v2/payments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"payments"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "1 - QAPI check DB",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"site\": \"{{site}}\",\n   \"charge_id\": \"{{chargeId}}\"\n}"
						},
						"url": {
							"raw": "{{qapi_url}}/tests/db",
							"host": [
								"{{qapi_url}}"
							],
							"path": [
								"tests",
								"db"
							]
						},
						"description": "POST check if an operation with these values exists in DB"
					},
					"response": []
				},
				{
					"name": "05c -Devolución parcial",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseBody) {",
									"    var jsonData = JSON.parse(responseBody);",
									"} else {",
									"    console.log('No se recibió respuesta con el formato esperado'); ",
									"}",
									"",
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"if (!tests[\"Status code is 201\"]) {",
									"    console.log('Alguna de las comprobaciones no dio resultados satisfactorios.');",
									"    ",
									"    if (jsonData) {",
									"        console.log('Se adjunta la respuesta recibida:');",
									"        console.log(jsonData);",
									"        ",
									"    } else {",
									"       console.log('Error al intentar parsear la respuesta obtenida. Se adjunta el cuerpo de la respuesta como fue recibido:');",
									"       console.log(responseBody);   ",
									"    }",
									"",
									"} else {",
									"",
									"    if (jsonData.id) {",
									"        console.log('Se creó la devolución con id ' + jsonData.id);",
									"        postman.setEnvironmentVariable(\"refundId\", jsonData.id);",
									"    } else {",
									"        console.log('No se encontró un id de devolución en la respuesta');",
									"    }",
									"    ",
									"    if (pm.environment.get(\"refundId\")) {",
									"        console.log('Se configuró la variable de entorno refundId con el valor ' + pm.environment.get(\"refundId\")); ",
									"    } else {",
									"        console.log('No se pudo configurar correctamente la variable de entorno refundId');    ",
									"    }",
									"    ",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "apikey",
								"value": "{{keyprivate}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"amount\": 10000\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v2/payments/{{chargeId}}/refunds",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"payments",
								"{{chargeId}}",
								"refunds"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "05d - Anulación de devolución",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseBody) {",
									"    var jsonData = JSON.parse(responseBody);",
									"} else {",
									"    console.log('No se recibió respuesta con el formato esperado'); ",
									"}",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if (!tests[\"Status code is 200\"]) {",
									"    console.log('Alguna de las comprobaciones no dio resultados satisfactorios.');",
									"    ",
									"    if (jsonData) {",
									"        console.log('Se adjunta la respuesta recibida:');",
									"        console.log(jsonData);",
									"        ",
									"    } else {",
									"       console.log('Error al intentar parsear la respuesta obtenida. Se adjunta el cuerpo de la respuesta como fue recibido:');",
									"       console.log(responseBody);   ",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "apikey",
								"value": "{{keyprivate}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{base_url}}/api/v2/payments/{{chargeId}}/refunds/{{refundId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"payments",
								"{{chargeId}}",
								"refunds",
								"{{refundId}}"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "06a - QAPI create subsite",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if (!tests[\"Status code is 200\"]) {",
									"console.log(jsonData);    ",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"site\": \"{{site}}\",\n   \"subsites\": \"{{subsites}}\"\n}"
						},
						"url": {
							"raw": "{{qapi_url}}/sites/subsites",
							"host": [
								"{{qapi_url}}"
							],
							"path": [
								"sites",
								"subsites"
							]
						},
						"description": "POST call to create subsites in a certain site FALCON"
					},
					"response": []
				},
				{
					"name": "06b - Replicate site",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if (!tests[\"Status code is 200\"]) {",
									"console.log(jsonData);    ",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							},
							{
								"key": "apikey",
								"value": "{{keypublic}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"card_number\" : \"4507990000004905\",\n    \"card_expiration_month\" : \"07\",\n    \"card_expiration_year\" : \"17\", \n    \"security_code\" : \"234\",\n    \"card_holder_name\" : \"Valentin Santiago Gomez\",\n    \"card_holder_identification\" : {\n       \"type\" : \"dni\",\n       \"number\" : \"23968498\"\n    },\n    \"fraud_detection\" : {\n        \"device_unique_identifier\": \"12345\"\n    }\n}"
						},
						"url": {
							"raw": "{{coretx_url}}/replication/site/{{site}}",
							"host": [
								"{{coretx_url}}"
							],
							"path": [
								"replication",
								"site",
								"{{site}}"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "06c - Creación de token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseBody) {",
									"    var jsonData = JSON.parse(responseBody);",
									"} else {",
									"    console.log('No se recibió respuesta con el formato esperado'); ",
									"}",
									"",
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"if (!tests[\"Status code is 201\"]) {",
									"    console.log('Alguna de las comprobaciones no dio resultados satisfactorios.');",
									"    if (jsonData) {",
									"        console.log('Se adjunta la respuesta recibida:');",
									"        console.log(jsonData);    ",
									"    } else {",
									"       console.log('Error al intentar parsear la respuesta obtenida. Se adjunta el cuerpo de la respuesta como fue recibido:');",
									"       console.log(responseBody);   ",
									"    }",
									"",
									"} else {",
									"",
									"    if (jsonData.id) {",
									"        console.log('Se creó el token con id ' + jsonData.id);",
									"        postman.setEnvironmentVariable(\"token\", jsonData.id);",
									"    } else {",
									"        console.log('No se encontró un id de token en la respuesta');",
									"    }",
									"    ",
									"    if (jsonData.bin) {",
									"        postman.setEnvironmentVariable(\"bin\", jsonData.bin);",
									"    }",
									"    ",
									"    if (pm.environment.get(\"token\")) {",
									"        console.log('Se configuró la variable de entorno token con el valor ' + pm.environment.get(\"token\")); ",
									"    } else {",
									"        console.log('No se pudo configurar correctamente la variable de entorno token');    ",
									"    }",
									"    ",
									"    if (pm.environment.get(\"bin\")) {",
									"        console.log('Se configuró la variable de entorno bin con el valor ' + pm.environment.get(\"bin\")); ",
									"    } else {",
									"        console.log('No se pudo configurar correctamente la variable de entorno bin');    ",
									"    }",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "apikey",
								"value": "{{keypublic}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"card_number\" : \"4509790112684851\",\n    \"card_expiration_month\" : \"07\",\n    \"card_expiration_year\" : \"19\", \n    \"security_code\" : \"234\",\n    \"card_holder_name\" : \"Valentin Santiago Gomez\",\n    \"card_holder_birthday\" : \"01012017\",\n    \"card_holder_door_number\": 348,\n    \"card_holder_identification\" : {\n       \"type\" : \"dni\",\n       \"number\" : \"23968498\"\n    },\n    \"fraud_detection\" : {\n        \"device_unique_identifier\": \"12345\"\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v2/tokens",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"tokens"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "06d - Pago distribuida",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseBody) {",
									"    var jsonData = JSON.parse(responseBody);",
									"} else {",
									"    console.log('No se recibió respuesta con el formato esperado'); ",
									"}",
									"",
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"if (!tests[\"Status code is 201\"]) {",
									"    console.log('Alguna de las comprobaciones no dio resultados satisfactorios.');",
									"    ",
									"    if (jsonData) {",
									"        console.log('Se adjunta la respuesta recibida:');",
									"        console.log(jsonData);",
									"        ",
									"    } else {",
									"       console.log('Error al intentar parsear la respuesta obtenida. Se adjunta el cuerpo de la respuesta como fue recibido:');",
									"       console.log(responseBody);   ",
									"    }",
									"",
									"} else {",
									"",
									"    if (jsonData.id) {",
									"        console.log('Se creó el pago con id ' + jsonData.id);",
									"        postman.setEnvironmentVariable(\"chargeId\", jsonData.id);",
									"    } else {",
									"        console.log('No se encontró un id de transacción en la respuesta');",
									"    }",
									"    ",
									"    if (pm.environment.get(\"chargeId\")) {",
									"        console.log('Se configuró la variable de entorno chargeId con el valor ' + pm.environment.get(\"chargeId\")); ",
									"    } else {",
									"        console.log('No se pudo configurar correctamente la variable de entorno chargeId');    ",
									"    }",
									"    ",
									"    ",
									"    if (jsonData.sub_payments) {",
									"        if (jsonData.sub_payments[0].subpayment_id) {",
									"            console.log('Se creó el subpago con id ' + jsonData.sub_payments[0].subpayment_id);",
									"            postman.setEnvironmentVariable(\"subPaymentId1\", jsonData.sub_payments[0].subpayment_id);",
									"        } else {",
									"            console.log('No se encontró un id de 1ra subtransacción en la respuesta');",
									"        }",
									"        ",
									"        if (jsonData.sub_payments[1].subpayment_id) {",
									"            console.log('Se creó el subpago con id ' + jsonData.sub_payments[1].subpayment_id);",
									"            postman.setEnvironmentVariable(\"subPaymentId2\", jsonData.sub_payments[1].subpayment_id);",
									"        } else {",
									"            console.log('No se encontró un id de 2da subtransacción en la respuesta');",
									"        }",
									"    } else {",
									"        console.log('No se encontraron subtransacciones en la respuesta');",
									"    }",
									"}"
								],
								"id": "3d4b9fe1-22e0-4de5-bd68-4adebf083c0a",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "apikey",
								"value": "{{keyprivate}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"user_id\": \"morton\",\n   \"site_transaction_id\": \"auto regrvisa {{$timestamp}}\",\n   \"token\": \"{{token}}\",\n   \"payment_method_id\": 1,\n   \"bin\": \"{{bin}}\",\n   \"amount\": 20000,\n   \"currency\": \"ARS\",\n   \"installments\": 1,\n   \"description\": \"Prueba QA\",\n   \"payment_type\": \"distributed\",\n   \"establishment_name\" : \"prueba desa soft\",\n   \"sub_payments\": [\n      {\n         \"site_id\": \"{{subsite_1}}\",\n         \"installments\": 5,\n         \"amount\": 12000\n      },\n      {\n         \"site_id\": \"{{subsite_2}}\",\n         \"installments\": 6,\n         \"amount\": 8000\n      }\n    ],\n   \"fraud_detection\": {\n\t\t\"send_to_cs\": false\n   }\n }"
						},
						"url": {
							"raw": "{{base_url}}/api/v2/payments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"payments"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "1 - QAPI check DB",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"site\": \"{{site}}\",\n   \"charge_id\": \"{{chargeId}}\"\n}"
						},
						"url": {
							"raw": "{{qapi_url}}/tests/db",
							"host": [
								"{{qapi_url}}"
							],
							"path": [
								"tests",
								"db"
							]
						},
						"description": "POST check if an operation with these values exists in DB"
					},
					"response": []
				},
				{
					"name": "06e - devolucion de distribuida",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseBody) {",
									"    var jsonData = JSON.parse(responseBody);",
									"} else {",
									"    console.log('No se recibió respuesta con el formato esperado'); ",
									"}",
									"",
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"if (!tests[\"Status code is 201\"]) {",
									"    console.log('Alguna de las comprobaciones no dio resultados satisfactorios.');",
									"    ",
									"    if (jsonData) {",
									"        console.log('Se adjunta la respuesta recibida:');",
									"        console.log(jsonData);",
									"        ",
									"    } else {",
									"       console.log('Error al intentar parsear la respuesta obtenida. Se adjunta el cuerpo de la respuesta como fue recibido:');",
									"       console.log(responseBody);   ",
									"    }",
									"",
									"} else {",
									"",
									"    if (jsonData.sub_payments[0].refund_id) {",
									"        console.log('Se creó la devolución con id ' + jsonData.sub_payments[0].refund_id);",
									"    postman.setEnvironmentVariable(\"refundId\", jsonData.sub_payments[0].refund_id);",
									"    } else {",
									"        console.log('No se encontró un id de devolución en la respuesta');",
									"    }",
									"    ",
									"    if (pm.environment.get(\"refundId\")) {",
									"        console.log('Se configuró la variable de entorno refundId con el valor ' + pm.environment.get(\"refundId\")); ",
									"    } else {",
									"        console.log('No se pudo configurar correctamente la variable de entorno refundId');    ",
									"    }",
									"    ",
									"}"
								],
								"id": "08a470bf-e3bd-4c39-ad97-7ea97aac1d0c",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "apikey",
								"value": "{{keyprivate}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"sub_payments\": [\n    {\n      \"id\": {{subPaymentId1}},\n      \"amount\": 2000\n    } \n    ]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v2/payments/{{chargeId}}/refunds",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"payments",
								"{{chargeId}}",
								"refunds"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "06f - Anulación de devolución distribuida",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseBody) {",
									"    var jsonData = JSON.parse(responseBody);",
									"} else {",
									"    console.log('No se recibió respuesta con el formato esperado'); ",
									"}",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if (!tests[\"Status code is 200\"]) {",
									"    console.log('Alguna de las comprobaciones no dio resultados satisfactorios.');",
									"    ",
									"    if (jsonData) {",
									"        console.log('Se adjunta la respuesta recibida:');",
									"        console.log(jsonData);",
									"        ",
									"    } else {",
									"       console.log('Error al intentar parsear la respuesta obtenida. Se adjunta el cuerpo de la respuesta como fue recibido:');",
									"       console.log(responseBody);   ",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "apikey",
								"value": "{{keyprivate}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{base_url}}/api/v2/payments/{{chargeId}}/refunds/{{refundId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"payments",
								"{{chargeId}}",
								"refunds",
								"{{refundId}}"
							]
						},
						"description": null
					},
					"response": []
				}
			]
		},
		{
			"name": "Reestablecimiento de la configuración",
			"description": "",
			"item": [
				{
					"name": "final - QAPI delete subsites",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"site\": \"{{site}}\"\n}"
						},
						"url": {
							"raw": "{{qapi_url}}/sites/subsites",
							"host": [
								"{{qapi_url}}"
							],
							"path": [
								"sites",
								"subsites"
							]
						},
						"description": "POST call to create subsites in a certain site"
					},
					"response": []
				},
				{
					"name": "final - Replicate site",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							},
							{
								"key": "apikey",
								"value": "{{keypublic}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"card_number\" : \"4507990000004905\",\n    \"card_expiration_month\" : \"07\",\n    \"card_expiration_year\" : \"17\", \n    \"security_code\" : \"234\",\n    \"card_holder_name\" : \"Valentin Santiago Gomez\",\n    \"card_holder_identification\" : {\n       \"type\" : \"dni\",\n       \"number\" : \"23968498\"\n    },\n    \"fraud_detection\" : {\n        \"device_unique_identifier\": \"12345\"\n    }\n}"
						},
						"url": {
							"raw": "{{coretx_url}}/replication/site/{{site}}",
							"host": [
								"{{coretx_url}}"
							],
							"path": [
								"replication",
								"site",
								"{{site}}"
							]
						},
						"description": null
					},
					"response": []
				}
			]
		}
	]
}